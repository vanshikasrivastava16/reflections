When would you want to use a remote repository rather than keeping all your work
local?
My most common use of remote repositories is when I'm collaborating with
    other people on a project.  I also use them when I want to share my code
    with someone, even if they just want to see my code and not contribute to
    it.  I also sometimes use them when I want to be able to edit code from
    multiple different computers and keep the code up-to-date on all the
    computers.  Also, remotes can be a good way to keep a backup of my work.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
I like pulling changes manually because that way, when I'm working on code,
    it doesn't change without me expecting it.  For example, if I know the new
    version of some code is broken, I might not want to pull that change until 
    the bug is fixed.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Forks, clones, and branches are all ways to add new changes without
    affecting the existing version.  With branches the new changes are added in
    the same repository.  Forking and cloning both copy an entire repository to
    a new location.  The difference between forking and cloning is that forking
    is a special construct made by GitHub.  You can only fork a GitHub
    repository to another location on GitHub, while you can clone any Git
    repository to anywhere you have access to.

 What is the benefit of having a copy of the last known state of the remote stored locally?
  Enables you to keep the state of the remote repository at your
    hand while you work on your branch locally, and also makes it
    easier for you to merge your own commits to the remote by merging
    it locally before you push to the remote.

    How would you collaborate without using Git or GitHub? What would be easier, and what would be harder? Without Git, you could, as we did in older days, make a patch file
    which is the output of diff command between the base source code
    and your modified one. Or you could even send simply a modified
    file of your own. In either case, it would be somewhat harder if
    there happen to be conflicsts with someone else's modification.
    On the other hand, without using git or other version control
    system, potentially it might be easier for someone who is not
    aquainted with how to use such system, to contribute to the
    repository.
    When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
     Working in a separate branch ensures that your master branch is
    always kept in a working state. You can try and experiment new
    functionality or algorithm in the new branch untill you are sure
    it works without breaking anything. On the other hand, an obvious
    fix for e.g. easy misspelling would not need much experimenting
    and could be fixed directly in the master branch.
   

